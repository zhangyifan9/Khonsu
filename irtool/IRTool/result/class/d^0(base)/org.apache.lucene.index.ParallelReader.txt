org.apache.lucene.index.ParallelReader{
private List readers = new ArrayList();
private List decrefOnClose = new ArrayList();
private SortedMap fieldToReader = new TreeMap();
private Map readerToFields = new HashMap();
private List storedFieldReaders = new ArrayList();
add(IndexReader, boolean){
Collection fields = reader.getFieldNames(IndexReader.FieldOption.ALL)
Iterator i = fields.iterator()
while(i.hasNext())
}
doReopen(boolean){
List newReaders = new ArrayList()
try
if (reopened)
}
isDeleted(int){
if (readers.size() > 0)
}
doDelete(int){
for(int i = 0; i < readers.size(); i++)
}
doUndeleteAll(){
for(int i = 0; i < readers.size(); i++)
}
document(int, FieldSelector){
for(int i = 0; i < storedFieldReaders.size(); i++)
}
getTermFreqVectors(int){
ArrayList results = new ArrayList()
Iterator i = fieldToReader.entrySet().iterator()
while(i.hasNext())
return (TermFreqVector[]) results.toArray(new TermFreqVector[results.size()]);
}
getTermFreqVector(int, String){
IndexReader reader = ((IndexReader) fieldToReader.get(field))
}
getTermFreqVector(int, String, TermVectorMapper){
IndexReader reader = ((IndexReader) fieldToReader.get(field))
}
getTermFreqVector(int, TermVectorMapper){
Iterator i = fieldToReader.entrySet().iterator()
while(i.hasNext())
}
hasNorms(String){
IndexReader reader = ((IndexReader) fieldToReader.get(field))
}
norms(String){
IndexReader reader = ((IndexReader) fieldToReader.get(field))
}
norms(String, byte[], int){
IndexReader reader = ((IndexReader) fieldToReader.get(field))
}
doSetNorm(int, String, byte){
IndexReader reader = ((IndexReader) fieldToReader.get(field))
}
docFreq(Term){
IndexReader reader = ((IndexReader) fieldToReader.get(term.field()))
}
isCurrent(){
for(int i = 0; i < readers.size(); i++)
}
isOptimized(){
for(int i = 0; i < readers.size(); i++)
}
getSubReaders(){
return (IndexReader[]) readers.toArray(new IndexReader[readers.size()]);
}
doCommit(){
doCommit(null);
}
doCommit(Map){
for(int i = 0; i < readers.size(); i++)
}
doClose(){
for(int i = 0; i < readers.size(); i++)
}
getFieldNames(IndexReader.FieldOption){
Set fieldSet = new HashSet()
for(int i = 0; i < readers.size(); i++)
}
}
