org.apache.lucene.search.spans.SpanNotQuery{
getTerms(){
return include.getTerms();
}
toString(String){
StringBuffer buffer = new StringBuffer()
}
getSpans(IndexReader){
return new Spans() {

    private Spans includeSpans = include.getSpans(reader);

    private boolean moreInclude = true;

    private Spans excludeSpans = exclude.getSpans(reader);

    private boolean moreExclude = excludeSpans.next();

    public boolean next() throws IOException {
        if (// move to next include
        moreInclude)
            moreInclude = includeSpans.next();
        while (moreInclude && moreExclude) {
            if (// skip exclude
            includeSpans.doc() > excludeSpans.doc())
                moreExclude = excludeSpans.skipTo(includeSpans.doc());
            while (// while exclude is before
            moreExclude && includeSpans.doc() == excludeSpans.doc() && excludeSpans.end() <= includeSpans.start()) {
                // increment exclude
                moreExclude = excludeSpans.next();
            }
            if (// if no intersection
            !moreExclude || includeSpans.doc() != excludeSpans.doc() || includeSpans.end() <= excludeSpans.start())
                // we found a match
                break;
            // intersected: keep scanning
            moreInclude = includeSpans.next();
        }
        return moreInclude;
    }

    public boolean skipTo(int target) throws IOException {
        if (// skip include
        moreInclude)
            moreInclude = includeSpans.skipTo(target);
        if (!moreInclude)
            return false;
        if (// skip exclude
        moreExclude && includeSpans.doc() > excludeSpans.doc())
            moreExclude = excludeSpans.skipTo(includeSpans.doc());
        while (// while exclude is before
        moreExclude && includeSpans.doc() == excludeSpans.doc() && excludeSpans.end() <= includeSpans.start()) {
            // increment exclude
            moreExclude = excludeSpans.next();
        }
        if (// if no intersection
        !moreExclude || includeSpans.doc() != excludeSpans.doc() || includeSpans.end() <= excludeSpans.start())
            // we found a match
            return true;
        // scan to next match
        return next();
    }

    public int doc() {
        return includeSpans.doc();
    }

    public int start() {
        return includeSpans.start();
    }

    public int end() {
        return includeSpans.end();
    }

    // TODO: Remove warning after API has been finalized
    public Collection getPayload() throws IOException {
        ArrayList result = null;
        if (includeSpans.isPayloadAvailable()) {
            result = new ArrayList(includeSpans.getPayload());
        }
        return result;
    }

    // TODO: Remove warning after API has been finalized
    public boolean isPayloadAvailable() {
        return includeSpans.isPayloadAvailable();
    }

    public String toString() {
        return "spans(" + SpanNotQuery.this.toString() + ")";
    }
};
}
}
