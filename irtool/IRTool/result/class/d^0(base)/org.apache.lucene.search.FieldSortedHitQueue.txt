import org.apache.lucene.index.IndexReader
import org.apache.lucene.util.PriorityQueue
import java.io.IOException
import java.text.Collator
import java.util.Locale
org.apache.lucene.search.FieldSortedHitQueue{
FieldSortedHitQueue(IndexReader, SortField[], int){
final int n = fields.length
comparators = new ScoreDocComparator[n];
this.fields = new SortField[n];
for(int i = 0; i < n; ++i)
initialize(size);
}
protected ScoreDocComparator[] comparators;
protected SortField[] fields;
protected float maxscore = Float.NEGATIVE_INFINITY;
static final FieldCacheImpl.Cache Comparators = new FieldCacheImpl.Cache() {

    protected Object createValue(IndexReader reader, FieldCacheImpl.Entry entryKey) throws IOException {
        FieldCacheImpl.Entry entry = (FieldCacheImpl.Entry) entryKey;
        String fieldname = entry.field;
        int type = entry.type;
        Locale locale = entry.locale;
        FieldCache.Parser parser = null;
        SortComparatorSource factory = null;
        if (entry.custom instanceof SortComparatorSource) {
            factory = (SortComparatorSource) entry.custom;
        } else {
            parser = (FieldCache.Parser) entry.custom;
        }
        ScoreDocComparator comparator;
        switch(type) {
            case SortField.AUTO:
                comparator = comparatorAuto(reader, fieldname);
                break;
            case SortField.INT:
                comparator = comparatorInt(reader, fieldname, (FieldCache.IntParser) parser);
                break;
            case SortField.FLOAT:
                comparator = comparatorFloat(reader, fieldname, (FieldCache.FloatParser) parser);
                break;
            case SortField.LONG:
                comparator = comparatorLong(reader, fieldname, (FieldCache.LongParser) parser);
                break;
            case SortField.DOUBLE:
                comparator = comparatorDouble(reader, fieldname, (FieldCache.DoubleParser) parser);
                break;
            case SortField.SHORT:
                comparator = comparatorShort(reader, fieldname, (FieldCache.ShortParser) parser);
                break;
            case SortField.BYTE:
                comparator = comparatorByte(reader, fieldname, (FieldCache.ByteParser) parser);
                break;
            case SortField.STRING:
                if (locale != null)
                    comparator = comparatorStringLocale(reader, fieldname, locale);
                else
                    comparator = comparatorString(reader, fieldname);
                break;
            case SortField.CUSTOM:
                comparator = factory.newComparator(reader, fieldname);
                break;
            default:
                throw new RuntimeException("unknown field type: " + type);
        }
        return comparator;
    }
};
getMaxScore(){
return maxscore;
}
updateMaxScore(FieldDoc){
maxscore = Math.max(maxscore, fdoc.score);
}
insert(FieldDoc){
updateMaxScore(fdoc);
return super.insert(fdoc);
}
insert(Object){
return insert((FieldDoc) fdoc);
}
insertWithOverflow(Object){
updateMaxScore((FieldDoc) element);
return super.insertWithOverflow(element);
}
lessThan(Object, Object){
final ScoreDoc docA = (ScoreDoc) a
final ScoreDoc docB = (ScoreDoc) b
final int n = comparators.length
int c = 0
for(int i = 0; i < n && c == 0; ++i)
if (c == 0)
return c > 0;
}
fillFields(FieldDoc){
final int n = comparators.length
final Comparable[] fields = new Comparable[n]
for(int i = 0; i < n; ++i)
doc.fields = fields;
return doc;
}
getFields(){
return fields;
}
getCachedComparator(IndexReader, String, int, FieldCache.Parser, Locale, SortComparatorSource){
if (type == SortField.DOC)
if (type == SortField.SCORE)
FieldCacheImpl.Entry entry = (factory != null) ? new FieldCacheImpl.Entry(field, factory) : ((parser != null) ? new FieldCacheImpl.Entry(field, type, parser) : new FieldCacheImpl.Entry(field, type, locale))
return (ScoreDocComparator) Comparators.get(reader, entry);
}
comparatorByte(IndexReader, String, FieldCache.ByteParser){
final String field = fieldname.intern()
final byte[] fieldOrder = FieldCache.DEFAULT.getBytes(reader, field, parser)
return new ScoreDocComparator() {

    public final int compare(final ScoreDoc i, final ScoreDoc j) {
        final int fi = fieldOrder[i.doc];
        final int fj = fieldOrder[j.doc];
        if (fi < fj)
            return -1;
        if (fi > fj)
            return 1;
        return 0;
    }

    public Comparable sortValue(final ScoreDoc i) {
        return new Byte(fieldOrder[i.doc]);
    }

    public int sortType() {
        return SortField.BYTE;
    }
};
}
comparatorShort(IndexReader, String, FieldCache.ShortParser){
final String field = fieldname.intern()
final short[] fieldOrder = FieldCache.DEFAULT.getShorts(reader, field, parser)
return new ScoreDocComparator() {

    public final int compare(final ScoreDoc i, final ScoreDoc j) {
        final int fi = fieldOrder[i.doc];
        final int fj = fieldOrder[j.doc];
        if (fi < fj)
            return -1;
        if (fi > fj)
            return 1;
        return 0;
    }

    public Comparable sortValue(final ScoreDoc i) {
        return new Short(fieldOrder[i.doc]);
    }

    public int sortType() {
        return SortField.SHORT;
    }
};
}
comparatorInt(IndexReader, String, FieldCache.IntParser){
final String field = fieldname.intern()
final int[] fieldOrder = FieldCache.DEFAULT.getInts(reader, field, parser)
return new ScoreDocComparator() {

    public final int compare(final ScoreDoc i, final ScoreDoc j) {
        final int fi = fieldOrder[i.doc];
        final int fj = fieldOrder[j.doc];
        if (fi < fj)
            return -1;
        if (fi > fj)
            return 1;
        return 0;
    }

    public Comparable sortValue(final ScoreDoc i) {
        return new Integer(fieldOrder[i.doc]);
    }

    public int sortType() {
        return SortField.INT;
    }
};
}
comparatorLong(IndexReader, String, FieldCache.LongParser){
final String field = fieldname.intern()
final long[] fieldOrder = FieldCache.DEFAULT.getLongs(reader, field, parser)
return new ScoreDocComparator() {

    public final int compare(final ScoreDoc i, final ScoreDoc j) {
        final long li = fieldOrder[i.doc];
        final long lj = fieldOrder[j.doc];
        if (li < lj)
            return -1;
        if (li > lj)
            return 1;
        return 0;
    }

    public Comparable sortValue(final ScoreDoc i) {
        return new Long(fieldOrder[i.doc]);
    }

    public int sortType() {
        return SortField.LONG;
    }
};
}
comparatorFloat(IndexReader, String, FieldCache.FloatParser){
final String field = fieldname.intern()
final float[] fieldOrder = FieldCache.DEFAULT.getFloats(reader, field, parser)
return new ScoreDocComparator() {

    public final int compare(final ScoreDoc i, final ScoreDoc j) {
        final float fi = fieldOrder[i.doc];
        final float fj = fieldOrder[j.doc];
        if (fi < fj)
            return -1;
        if (fi > fj)
            return 1;
        return 0;
    }

    public Comparable sortValue(final ScoreDoc i) {
        return new Float(fieldOrder[i.doc]);
    }

    public int sortType() {
        return SortField.FLOAT;
    }
};
}
comparatorDouble(IndexReader, String, FieldCache.DoubleParser){
final String field = fieldname.intern()
final double[] fieldOrder = FieldCache.DEFAULT.getDoubles(reader, field, parser)
return new ScoreDocComparator() {

    public final int compare(final ScoreDoc i, final ScoreDoc j) {
        final double di = fieldOrder[i.doc];
        final double dj = fieldOrder[j.doc];
        if (di < dj)
            return -1;
        if (di > dj)
            return 1;
        return 0;
    }

    public Comparable sortValue(final ScoreDoc i) {
        return new Double(fieldOrder[i.doc]);
    }

    public int sortType() {
        return SortField.DOUBLE;
    }
};
}
comparatorString(IndexReader, String){
final String field = fieldname.intern()
final FieldCache.StringIndex index = FieldCache.DEFAULT.getStringIndex(reader, field)
return new ScoreDocComparator() {

    public final int compare(final ScoreDoc i, final ScoreDoc j) {
        final int fi = index.order[i.doc];
        final int fj = index.order[j.doc];
        if (fi < fj)
            return -1;
        if (fi > fj)
            return 1;
        return 0;
    }

    public Comparable sortValue(final ScoreDoc i) {
        return index.lookup[index.order[i.doc]];
    }

    public int sortType() {
        return SortField.STRING;
    }
};
}
comparatorStringLocale(IndexReader, String, Locale){
final Collator collator = Collator.getInstance(locale)
final String field = fieldname.intern()
final String[] index = FieldCache.DEFAULT.getStrings(reader, field)
return new ScoreDocComparator() {

    public final int compare(final ScoreDoc i, final ScoreDoc j) {
        String is = index[i.doc];
        String js = index[j.doc];
        if (is == js) {
            return 0;
        } else if (is == null) {
            return -1;
        } else if (js == null) {
            return 1;
        } else {
            return collator.compare(is, js);
        }
    }

    public Comparable sortValue(final ScoreDoc i) {
        return index[i.doc];
    }

    public int sortType() {
        return SortField.STRING;
    }
};
}
comparatorAuto(IndexReader, String){
final String field = fieldname.intern()
Object lookupArray = FieldCache.DEFAULT.getAuto(reader, field)
if (lookupArray instanceof FieldCache.StringIndex)
else
}
}
