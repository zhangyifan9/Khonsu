org.apache.lucene.search.FieldCacheRangeFilter{
final Object lowerVal;
final Object upperVal;
FieldCacheRangeFilter(String, FieldCache.Parser, Object, Object, boolean, boolean){
this.field = field;
this.parser = parser;
this.lowerVal = lowerVal;
this.upperVal = upperVal;
this.includeLower = includeLower;
this.includeUpper = includeUpper;
}
newStringRange(String, String, String, boolean, boolean){
return new FieldCacheRangeFilter(field, null, lowerVal, upperVal, includeLower, includeUpper) {

    public DocIdSet getDocIdSet(IndexReader reader) throws IOException {
        final FieldCache.StringIndex fcsi = FieldCache.DEFAULT.getStringIndex(reader, field);
        final int lowerPoint = fcsi.binarySearchLookup((String) lowerVal);
        final int upperPoint = fcsi.binarySearchLookup((String) upperVal);
        final int inclusiveLowerPoint, inclusiveUpperPoint;
        // is (-(insertion point) - 1)
        if (lowerPoint == 0) {
            assert lowerVal == null;
            inclusiveLowerPoint = 1;
        } else if (includeLower && lowerPoint > 0) {
            inclusiveLowerPoint = lowerPoint;
        } else if (lowerPoint > 0) {
            inclusiveLowerPoint = lowerPoint + 1;
        } else {
            inclusiveLowerPoint = Math.max(1, -lowerPoint - 1);
        }
        if (upperPoint == 0) {
            assert upperVal == null;
            inclusiveUpperPoint = Integer.MAX_VALUE;
        } else if (includeUpper && upperPoint > 0) {
            inclusiveUpperPoint = upperPoint;
        } else if (upperPoint > 0) {
            inclusiveUpperPoint = upperPoint - 1;
        } else {
            inclusiveUpperPoint = -upperPoint - 2;
        }
        if (inclusiveUpperPoint <= 0 || inclusiveLowerPoint > inclusiveUpperPoint)
            return DocIdSet.EMPTY_DOCIDSET;
        assert inclusiveLowerPoint > 0 && inclusiveUpperPoint > 0;
        // because deleted docs have an order of 0 (null entry in StringIndex)
        return new FieldCacheDocIdSet(reader, false) {

            final boolean matchDoc(int doc) {
                return fcsi.order[doc] >= inclusiveLowerPoint && fcsi.order[doc] <= inclusiveUpperPoint;
            }
        };
    }
};
}
newByteRange(String, FieldCache.ByteParser, Byte, Byte, boolean, boolean){
return new FieldCacheRangeFilter(field, parser, lowerVal, upperVal, includeLower, includeUpper) {

    public DocIdSet getDocIdSet(IndexReader reader) throws IOException {
        final byte inclusiveLowerPoint, inclusiveUpperPoint;
        if (lowerVal != null) {
            final byte i = ((Number) lowerVal).byteValue();
            if (!includeLower && i == Byte.MAX_VALUE)
                return DocIdSet.EMPTY_DOCIDSET;
            inclusiveLowerPoint = (byte) (includeLower ? i : (i + 1));
        } else {
            inclusiveLowerPoint = Byte.MIN_VALUE;
        }
        if (upperVal != null) {
            final byte i = ((Number) upperVal).byteValue();
            if (!includeUpper && i == Byte.MIN_VALUE)
                return DocIdSet.EMPTY_DOCIDSET;
            inclusiveUpperPoint = (byte) (includeUpper ? i : (i - 1));
        } else {
            inclusiveUpperPoint = Byte.MAX_VALUE;
        }
        if (inclusiveLowerPoint > inclusiveUpperPoint)
            return DocIdSet.EMPTY_DOCIDSET;
        final byte[] values = FieldCache.DEFAULT.getBytes(reader, field, (FieldCache.ByteParser) parser);
        // we only request the usage of termDocs, if the range contains 0
        return new FieldCacheDocIdSet(reader, (inclusiveLowerPoint <= 0 && inclusiveUpperPoint >= 0)) {

            boolean matchDoc(int doc) {
                return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;
            }
        };
    }
};
}
newShortRange(String, FieldCache.ShortParser, Short, Short, boolean, boolean){
return new FieldCacheRangeFilter(field, parser, lowerVal, upperVal, includeLower, includeUpper) {

    public DocIdSet getDocIdSet(IndexReader reader) throws IOException {
        final short inclusiveLowerPoint, inclusiveUpperPoint;
        if (lowerVal != null) {
            short i = ((Number) lowerVal).shortValue();
            if (!includeLower && i == Short.MAX_VALUE)
                return DocIdSet.EMPTY_DOCIDSET;
            inclusiveLowerPoint = (short) (includeLower ? i : (i + 1));
        } else {
            inclusiveLowerPoint = Short.MIN_VALUE;
        }
        if (upperVal != null) {
            short i = ((Number) upperVal).shortValue();
            if (!includeUpper && i == Short.MIN_VALUE)
                return DocIdSet.EMPTY_DOCIDSET;
            inclusiveUpperPoint = (short) (includeUpper ? i : (i - 1));
        } else {
            inclusiveUpperPoint = Short.MAX_VALUE;
        }
        if (inclusiveLowerPoint > inclusiveUpperPoint)
            return DocIdSet.EMPTY_DOCIDSET;
        final short[] values = FieldCache.DEFAULT.getShorts(reader, field, (FieldCache.ShortParser) parser);
        // we only request the usage of termDocs, if the range contains 0
        return new FieldCacheDocIdSet(reader, (inclusiveLowerPoint <= 0 && inclusiveUpperPoint >= 0)) {

            boolean matchDoc(int doc) {
                return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;
            }
        };
    }
};
}
newIntRange(String, FieldCache.IntParser, Integer, Integer, boolean, boolean){
return new FieldCacheRangeFilter(field, parser, lowerVal, upperVal, includeLower, includeUpper) {

    public DocIdSet getDocIdSet(IndexReader reader) throws IOException {
        final int inclusiveLowerPoint, inclusiveUpperPoint;
        if (lowerVal != null) {
            int i = ((Number) lowerVal).intValue();
            if (!includeLower && i == Integer.MAX_VALUE)
                return DocIdSet.EMPTY_DOCIDSET;
            inclusiveLowerPoint = includeLower ? i : (i + 1);
        } else {
            inclusiveLowerPoint = Integer.MIN_VALUE;
        }
        if (upperVal != null) {
            int i = ((Number) upperVal).intValue();
            if (!includeUpper && i == Integer.MIN_VALUE)
                return DocIdSet.EMPTY_DOCIDSET;
            inclusiveUpperPoint = includeUpper ? i : (i - 1);
        } else {
            inclusiveUpperPoint = Integer.MAX_VALUE;
        }
        if (inclusiveLowerPoint > inclusiveUpperPoint)
            return DocIdSet.EMPTY_DOCIDSET;
        final int[] values = FieldCache.DEFAULT.getInts(reader, field, (FieldCache.IntParser) parser);
        // we only request the usage of termDocs, if the range contains 0
        return new FieldCacheDocIdSet(reader, (inclusiveLowerPoint <= 0 && inclusiveUpperPoint >= 0)) {

            boolean matchDoc(int doc) {
                return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;
            }
        };
    }
};
}
newLongRange(String, FieldCache.LongParser, Long, Long, boolean, boolean){
return new FieldCacheRangeFilter(field, parser, lowerVal, upperVal, includeLower, includeUpper) {

    public DocIdSet getDocIdSet(IndexReader reader) throws IOException {
        final long inclusiveLowerPoint, inclusiveUpperPoint;
        if (lowerVal != null) {
            long i = ((Number) lowerVal).longValue();
            if (!includeLower && i == Long.MAX_VALUE)
                return DocIdSet.EMPTY_DOCIDSET;
            inclusiveLowerPoint = includeLower ? i : (i + 1L);
        } else {
            inclusiveLowerPoint = Long.MIN_VALUE;
        }
        if (upperVal != null) {
            long i = ((Number) upperVal).longValue();
            if (!includeUpper && i == Long.MIN_VALUE)
                return DocIdSet.EMPTY_DOCIDSET;
            inclusiveUpperPoint = includeUpper ? i : (i - 1L);
        } else {
            inclusiveUpperPoint = Long.MAX_VALUE;
        }
        if (inclusiveLowerPoint > inclusiveUpperPoint)
            return DocIdSet.EMPTY_DOCIDSET;
        final long[] values = FieldCache.DEFAULT.getLongs(reader, field, (FieldCache.LongParser) parser);
        // we only request the usage of termDocs, if the range contains 0
        return new FieldCacheDocIdSet(reader, (inclusiveLowerPoint <= 0L && inclusiveUpperPoint >= 0L)) {

            boolean matchDoc(int doc) {
                return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;
            }
        };
    }
};
}
newFloatRange(String, FieldCache.FloatParser, Float, Float, boolean, boolean){
return new FieldCacheRangeFilter(field, parser, lowerVal, upperVal, includeLower, includeUpper) {

    public DocIdSet getDocIdSet(IndexReader reader) throws IOException {
        // we transform the floating point numbers to sortable integers
        // using NumericUtils to easier find the next bigger/lower value
        final float inclusiveLowerPoint, inclusiveUpperPoint;
        if (lowerVal != null) {
            float f = ((Number) lowerVal).floatValue();
            if (!includeUpper && f > 0.0f && Float.isInfinite(f))
                return DocIdSet.EMPTY_DOCIDSET;
            int i = NumericUtils.floatToSortableInt(f);
            inclusiveLowerPoint = NumericUtils.sortableIntToFloat(includeLower ? i : (i + 1));
        } else {
            inclusiveLowerPoint = Float.NEGATIVE_INFINITY;
        }
        if (upperVal != null) {
            float f = ((Number) upperVal).floatValue();
            if (!includeUpper && f < 0.0f && Float.isInfinite(f))
                return DocIdSet.EMPTY_DOCIDSET;
            int i = NumericUtils.floatToSortableInt(f);
            inclusiveUpperPoint = NumericUtils.sortableIntToFloat(includeUpper ? i : (i - 1));
        } else {
            inclusiveUpperPoint = Float.POSITIVE_INFINITY;
        }
        if (inclusiveLowerPoint > inclusiveUpperPoint)
            return DocIdSet.EMPTY_DOCIDSET;
        final float[] values = FieldCache.DEFAULT.getFloats(reader, field, (FieldCache.FloatParser) parser);
        // we only request the usage of termDocs, if the range contains 0
        return new FieldCacheDocIdSet(reader, (inclusiveLowerPoint <= 0.0f && inclusiveUpperPoint >= 0.0f)) {

            boolean matchDoc(int doc) {
                return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;
            }
        };
    }
};
}
newDoubleRange(String, FieldCache.DoubleParser, Double, Double, boolean, boolean){
return new FieldCacheRangeFilter(field, parser, lowerVal, upperVal, includeLower, includeUpper) {

    public DocIdSet getDocIdSet(IndexReader reader) throws IOException {
        // we transform the floating point numbers to sortable integers
        // using NumericUtils to easier find the next bigger/lower value
        final double inclusiveLowerPoint, inclusiveUpperPoint;
        if (lowerVal != null) {
            double f = ((Number) lowerVal).doubleValue();
            if (!includeUpper && f > 0.0 && Double.isInfinite(f))
                return DocIdSet.EMPTY_DOCIDSET;
            long i = NumericUtils.doubleToSortableLong(f);
            inclusiveLowerPoint = NumericUtils.sortableLongToDouble(includeLower ? i : (i + 1L));
        } else {
            inclusiveLowerPoint = Double.NEGATIVE_INFINITY;
        }
        if (upperVal != null) {
            double f = ((Number) upperVal).doubleValue();
            if (!includeUpper && f < 0.0 && Double.isInfinite(f))
                return DocIdSet.EMPTY_DOCIDSET;
            long i = NumericUtils.doubleToSortableLong(f);
            inclusiveUpperPoint = NumericUtils.sortableLongToDouble(includeUpper ? i : (i - 1L));
        } else {
            inclusiveUpperPoint = Double.POSITIVE_INFINITY;
        }
        if (inclusiveLowerPoint > inclusiveUpperPoint)
            return DocIdSet.EMPTY_DOCIDSET;
        final double[] values = FieldCache.DEFAULT.getDoubles(reader, field, (FieldCache.DoubleParser) parser);
        // we only request the usage of termDocs, if the range contains 0
        return new FieldCacheDocIdSet(reader, (inclusiveLowerPoint <= 0.0 && inclusiveUpperPoint >= 0.0)) {

            boolean matchDoc(int doc) {
                return values[doc] >= inclusiveLowerPoint && values[doc] <= inclusiveUpperPoint;
            }
        };
    }
};
}
toString(){
final StringBuffer sb = new StringBuffer(field).append(":")
}
}
